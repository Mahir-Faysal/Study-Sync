{"ast":null,"code":"import axios from 'axios';\nimport AuthService from './AuthService';\nconst API_URL = 'http://localhost:8080/api';\nclass ApiService {\n  // Questions\n  createQuestion(questionData) {\n    return axios.post(API_URL + '/questions', questionData, {\n      headers: AuthService.getAuthHeader()\n    });\n  }\n  getMyQuestions() {\n    return axios.get(API_URL + '/questions', {\n      headers: AuthService.getAuthHeader()\n    });\n  }\n  getQuestion(id) {\n    return axios.get(API_URL + '/questions/' + id, {\n      headers: AuthService.getAuthHeader()\n    });\n  }\n  updateQuestion(id, questionData) {\n    return axios.put(API_URL + '/questions/' + id, questionData, {\n      headers: AuthService.getAuthHeader()\n    });\n  }\n  deleteQuestion(id) {\n    return axios.delete(API_URL + '/questions/' + id, {\n      headers: AuthService.getAuthHeader()\n    });\n  }\n\n  // Exams\n  createExam(examData) {\n    return axios.post(API_URL + '/exams', examData, {\n      headers: AuthService.getAuthHeader()\n    });\n  }\n  getMyExams() {\n    return axios.get(API_URL + '/exams/my', {\n      headers: AuthService.getAuthHeader()\n    });\n  }\n  getActiveExams() {\n    return axios.get(API_URL + '/exams/active', {\n      headers: AuthService.getAuthHeader()\n    });\n  }\n  getExam(id) {\n    return axios.get(API_URL + '/exams/' + id, {\n      headers: AuthService.getAuthHeader()\n    });\n  }\n  updateExamStatus(id, status) {\n    return axios.put(API_URL + '/exams/' + id + '/status', {\n      status\n    }, {\n      headers: AuthService.getAuthHeader()\n    });\n  }\n  submitExam(id, answers) {\n    return axios.post(API_URL + '/exams/' + id + '/submit', {\n      answers\n    }, {\n      headers: AuthService.getAuthHeader()\n    });\n  }\n  getMyResults() {\n    return axios.get(API_URL + '/exams/results', {\n      headers: AuthService.getAuthHeader()\n    });\n  }\n\n  // Forum\n  postForumQuestion(questionData) {\n    return axios.post(API_URL + '/forum/questions', questionData, {\n      headers: AuthService.getAuthHeader()\n    });\n  }\n  getForumQuestions(sortBy = 'recent') {\n    return axios.get(API_URL + '/forum/questions?sortBy=' + sortBy, {\n      headers: AuthService.getAuthHeader()\n    });\n  }\n  getForumQuestion(id) {\n    return axios.get(API_URL + '/forum/questions/' + id, {\n      headers: AuthService.getAuthHeader()\n    });\n  }\n  postForumAnswer(questionId, content) {\n    return axios.post(API_URL + '/forum/questions/' + questionId + '/answers', {\n      content\n    }, {\n      headers: AuthService.getAuthHeader()\n    });\n  }\n  getForumQuestionsByTag(tag) {\n    return axios.get(API_URL + '/forum/questions/tag/' + tag, {\n      headers: AuthService.getAuthHeader()\n    });\n  }\n\n  // Analytics\n  getExamAnalytics(id) {\n    return axios.get(API_URL + '/analytics/exams/' + id, {\n      headers: AuthService.getAuthHeader()\n    });\n  }\n  getMyExamAnalytics() {\n    return axios.get(API_URL + '/analytics/exams', {\n      headers: AuthService.getAuthHeader()\n    });\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["axios","AuthService","API_URL","ApiService","createQuestion","questionData","post","headers","getAuthHeader","getMyQuestions","get","getQuestion","id","updateQuestion","put","deleteQuestion","delete","createExam","examData","getMyExams","getActiveExams","getExam","updateExamStatus","status","submitExam","answers","getMyResults","postForumQuestion","getForumQuestions","sortBy","getForumQuestion","postForumAnswer","questionId","content","getForumQuestionsByTag","tag","getExamAnalytics","getMyExamAnalytics"],"sources":["C:/Users/USER/Documents/Code/JavaFest/frontend/src/services/ApiService.js"],"sourcesContent":["import axios from 'axios';\r\nimport AuthService from './AuthService';\r\n\r\nconst API_URL = 'http://localhost:8080/api';\r\n\r\nclass ApiService {\r\n  // Questions\r\n  createQuestion(questionData) {\r\n    return axios.post(API_URL + '/questions', questionData, {\r\n      headers: AuthService.getAuthHeader()\r\n    });\r\n  }\r\n\r\n  getMyQuestions() {\r\n    return axios.get(API_URL + '/questions', {\r\n      headers: AuthService.getAuthHeader()\r\n    });\r\n  }\r\n\r\n  getQuestion(id) {\r\n    return axios.get(API_URL + '/questions/' + id, {\r\n      headers: AuthService.getAuthHeader()\r\n    });\r\n  }\r\n\r\n  updateQuestion(id, questionData) {\r\n    return axios.put(API_URL + '/questions/' + id, questionData, {\r\n      headers: AuthService.getAuthHeader()\r\n    });\r\n  }\r\n\r\n  deleteQuestion(id) {\r\n    return axios.delete(API_URL + '/questions/' + id, {\r\n      headers: AuthService.getAuthHeader()\r\n    });\r\n  }\r\n\r\n  // Exams\r\n  createExam(examData) {\r\n    return axios.post(API_URL + '/exams', examData, {\r\n      headers: AuthService.getAuthHeader()\r\n    });\r\n  }\r\n\r\n  getMyExams() {\r\n    return axios.get(API_URL + '/exams/my', {\r\n      headers: AuthService.getAuthHeader()\r\n    });\r\n  }\r\n\r\n  getActiveExams() {\r\n    return axios.get(API_URL + '/exams/active', {\r\n      headers: AuthService.getAuthHeader()\r\n    });\r\n  }\r\n\r\n  getExam(id) {\r\n    return axios.get(API_URL + '/exams/' + id, {\r\n      headers: AuthService.getAuthHeader()\r\n    });\r\n  }\r\n\r\n  updateExamStatus(id, status) {\r\n    return axios.put(API_URL + '/exams/' + id + '/status', { status }, {\r\n      headers: AuthService.getAuthHeader()\r\n    });\r\n  }\r\n\r\n  submitExam(id, answers) {\r\n    return axios.post(API_URL + '/exams/' + id + '/submit', { answers }, {\r\n      headers: AuthService.getAuthHeader()\r\n    });\r\n  }\r\n\r\n  getMyResults() {\r\n    return axios.get(API_URL + '/exams/results', {\r\n      headers: AuthService.getAuthHeader()\r\n    });\r\n  }\r\n\r\n  // Forum\r\n  postForumQuestion(questionData) {\r\n    return axios.post(API_URL + '/forum/questions', questionData, {\r\n      headers: AuthService.getAuthHeader()\r\n    });\r\n  }\r\n\r\n  getForumQuestions(sortBy = 'recent') {\r\n    return axios.get(API_URL + '/forum/questions?sortBy=' + sortBy, {\r\n      headers: AuthService.getAuthHeader()\r\n    });\r\n  }\r\n\r\n  getForumQuestion(id) {\r\n    return axios.get(API_URL + '/forum/questions/' + id, {\r\n      headers: AuthService.getAuthHeader()\r\n    });\r\n  }\r\n\r\n  postForumAnswer(questionId, content) {\r\n    return axios.post(API_URL + '/forum/questions/' + questionId + '/answers', { content }, {\r\n      headers: AuthService.getAuthHeader()\r\n    });\r\n  }\r\n\r\n  getForumQuestionsByTag(tag) {\r\n    return axios.get(API_URL + '/forum/questions/tag/' + tag, {\r\n      headers: AuthService.getAuthHeader()\r\n    });\r\n  }\r\n\r\n  // Analytics\r\n  getExamAnalytics(id) {\r\n    return axios.get(API_URL + '/analytics/exams/' + id, {\r\n      headers: AuthService.getAuthHeader()\r\n    });\r\n  }\r\n\r\n  getMyExamAnalytics() {\r\n    return axios.get(API_URL + '/analytics/exams', {\r\n      headers: AuthService.getAuthHeader()\r\n    });\r\n  }\r\n}\r\n\r\nexport default new ApiService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}