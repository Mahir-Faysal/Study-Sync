{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api';\nclass AuthService {\n  login(username, password) {\n    return axios.post(API_URL + '/auth/signin', {\n      username,\n      password\n    }).then(response => {\n      if (response.data.token) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      return response.data;\n    });\n  }\n  logout() {\n    localStorage.removeItem('user');\n  }\n  register(username, email, password, firstName, lastName, role) {\n    return axios.post(API_URL + '/auth/signup', {\n      username,\n      email,\n      password,\n      firstName,\n      lastName,\n      role\n    });\n  }\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n  getAuthHeader() {\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (user && user.token) {\n      return {\n        Authorization: 'Bearer ' + user.token\n      };\n    } else {\n      return {};\n    }\n  }\n}\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["axios","API_URL","AuthService","login","username","password","post","then","response","data","token","localStorage","setItem","JSON","stringify","logout","removeItem","register","email","firstName","lastName","role","getCurrentUser","parse","getItem","getAuthHeader","user","Authorization","authService"],"sources":["C:/Users/USER/Documents/Code/JavaFest/frontend/src/services/AuthService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8080/api';\r\n\r\nclass AuthService {\r\n  login(username, password) {\r\n    return axios\r\n      .post(API_URL + '/auth/signin', {\r\n        username,\r\n        password\r\n      })\r\n      .then(response => {\r\n        if (response.data.token) {\r\n          localStorage.setItem('user', JSON.stringify(response.data));\r\n        }\r\n        return response.data;\r\n      });\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('user');\r\n  }\r\n\r\n  register(username, email, password, firstName, lastName, role) {\r\n    return axios.post(API_URL + '/auth/signup', {\r\n      username,\r\n      email,\r\n      password,\r\n      firstName,\r\n      lastName,\r\n      role\r\n    });\r\n  }\r\n\r\n  getCurrentUser() {\r\n    return JSON.parse(localStorage.getItem('user'));\r\n  }\r\n\r\n  getAuthHeader() {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    if (user && user.token) {\r\n      return { Authorization: 'Bearer ' + user.token };\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n}\r\n\r\nconst authService = new AuthService();\r\nexport default authService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,MAAMC,WAAW,CAAC;EAChBC,KAAKA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IACxB,OAAOL,KAAK,CACTM,IAAI,CAACL,OAAO,GAAG,cAAc,EAAE;MAC9BG,QAAQ;MACRC;IACF,CAAC,CAAC,CACDE,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAIA,QAAQ,CAACC,IAAI,CAACC,KAAK,EAAE;QACvBC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC7D;MACA,OAAOD,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC;EACN;EAEAM,MAAMA,CAAA,EAAG;IACPJ,YAAY,CAACK,UAAU,CAAC,MAAM,CAAC;EACjC;EAEAC,QAAQA,CAACb,QAAQ,EAAEc,KAAK,EAAEb,QAAQ,EAAEc,SAAS,EAAEC,QAAQ,EAAEC,IAAI,EAAE;IAC7D,OAAOrB,KAAK,CAACM,IAAI,CAACL,OAAO,GAAG,cAAc,EAAE;MAC1CG,QAAQ;MACRc,KAAK;MACLb,QAAQ;MACRc,SAAS;MACTC,QAAQ;MACRC;IACF,CAAC,CAAC;EACJ;EAEAC,cAAcA,CAAA,EAAG;IACf,OAAOT,IAAI,CAACU,KAAK,CAACZ,YAAY,CAACa,OAAO,CAAC,MAAM,CAAC,CAAC;EACjD;EAEAC,aAAaA,CAAA,EAAG;IACd,MAAMC,IAAI,GAAGb,IAAI,CAACU,KAAK,CAACZ,YAAY,CAACa,OAAO,CAAC,MAAM,CAAC,CAAC;IACrD,IAAIE,IAAI,IAAIA,IAAI,CAAChB,KAAK,EAAE;MACtB,OAAO;QAAEiB,aAAa,EAAE,SAAS,GAAGD,IAAI,CAAChB;MAAM,CAAC;IAClD,CAAC,MAAM;MACL,OAAO,CAAC,CAAC;IACX;EACF;AACF;AAEA,MAAMkB,WAAW,GAAG,IAAI1B,WAAW,CAAC,CAAC;AACrC,eAAe0B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}